@inherits TestContext
@namespace TailwindVariants.NET.Tests.Components

@code
{
    public ButtonTests()
    {
        Services.AddTailwindVariants();
    }

    [Fact]
    public void Renders_BaseClass_ByDefault()
    {
        // Arrange
        var cut = RenderComponent<Button>();

        // Act
        var button = cut.Find("button");

        // Assert
        button.ClassList.ShouldContain("px-3");
    }

    [Fact]
    public void Applies_Variant_Primary()
    {
        // Arrange
        var cut = Render(
            @<Button Variant="@Button.Variants.Solid" />
        );

        // Act
        var button = cut.Find("button");

        // Assert
        button.ClassList.ShouldContain("bg-slate-900");
        button.ClassList.ShouldContain("text-white");
    }

    [Fact]
    public void Applies_Variant_Secondary()
    {
        var cut = Render(
            @<Button Variant="@Button.Variants.Outline" />
        );

        var button = cut.Find("button");

        button.ClassList.ShouldContain("border");
        button.ClassList.ShouldContain("border-slate-200");
    }

    [Fact]
    public void Applies_Size_Small()
    {
        var cut = Render(
            @<Button Size="@Button.Sizes.Small" />
        );

        var button = cut.Find("button");

        button.ClassList.ShouldContain("h-9");
        button.ClassList.ShouldContain("px-3");
    }

    [Fact]
    public void Applies_Size_Large()
    {
        var cut = Render(
            @<Button Size="@Button.Sizes.Large" />
        );

        var button = cut.Find("button");

        button.ClassList.ShouldContain("h-11");
        button.ClassList.ShouldContain("px-6");
    }

    [Fact]
    public void CompoundVariant_PrimaryLarge_Adds_ExtraClasses()
    {
        // Arrange
        var cut = Render(
            @<Button Variant="@Button.Variants.Ghost" Size="@Button.Sizes.Small" />
        );

        // Act
        var button = cut.Find("button");

        // Assert
        button.ClassList.ShouldContain("px-2"); // Example compound
    }

    [Fact]
    public void PerInstance_Classes_AreApplied()
    {
        var cut = Render(
            @<Button Classes="@(new() { Base = "rounded-full" })" />
        );

        var button = cut.Find("button");
        button.ClassList.ShouldContain("rounded-full");
    }

    [Fact]
    public void PerInstance_ClassProperty_IsApplied()
    {
        var cut =  Render(
            @<Button Class="m-2" />
        );

        var button = cut.Find("button");

        button.ClassList.ShouldContain("m-2");
    }

    [Fact]
    public void EnumerateOverrides_Yields_PerInstanceClasses()
    {
        var instance = new Button
        {
            Classes = new Button.Slots { Base = "rounded-xl", Icon = "size-5" }
        };

        var overrides = instance.Classes!.EnumerateOverrides().ToList();

        overrides.ShouldContain(t => t.Slot == nameof(Button.Slots.Base) && t.Value == "rounded-xl");
        overrides.ShouldContain(t => t.Slot == nameof(Button.Slots.Icon) && t.Value == "size-5");
    }
}