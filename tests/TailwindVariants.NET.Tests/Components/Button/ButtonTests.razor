@inherits TestContext
@namespace TailwindVariants.NET.Tests.Components

@code
{
    public ButtonTests()
    {
        Services.AddTailwindVariants();
    }

    [Fact]
    public void Renders_BaseClass_ByDefault()
    {
        // Arrange
        var cut = RenderComponent<Button>();

        // Act
        var button = cut.Find("button");

        // Assert
        Assert.Contains("px-3", button.ClassList);
    }

    [Fact]
    public void Applies_Variant_Primary()
    {
        // Arrange
        var cut = Render(
            @<Button Variant="@Button.Variants.Solid" />
        );

        // Act
        var button = cut.Find("button");

        // Assert
        Assert.Contains("bg-slate-900", button.ClassList);
        Assert.Contains("text-white", button.ClassList);
    }

    [Fact]
    public void Applies_Variant_Secondary()
    {
        var cut = Render(
            @<Button Variant="@Button.Variants.Outline" />
        );

        var button = cut.Find("button");

        Assert.Contains("border", button.ClassList);
        Assert.Contains("border-slate-200", button.ClassList);
    }

    [Fact]
    public void Applies_Size_Small()
    {
        var cut = Render(
            @<Button Size="@Button.Sizes.Small" />
        );

        var button = cut.Find("button");

        Assert.Contains("h-9", button.ClassList);
        Assert.Contains("px-3", button.ClassList);
    }

    [Fact]
    public void Applies_Size_Large()
    {
        var cut = Render(
            @<Button Size="@Button.Sizes.Large" />
        );

        var button = cut.Find("button");

        Assert.Contains("h-11", button.ClassList);
        Assert.Contains("px-6", button.ClassList);
    }

    [Fact]
    public void CompoundVariant_PrimaryLarge_Adds_ExtraClasses()
    {
        // Arrange
        var cut = Render(
            @<Button Variant="@Button.Variants.Ghost" Size="@Button.Sizes.Small" />
        );

        // Act
        var button = cut.Find("button");

        // Assert
        Assert.Contains("px-2", button.ClassList);
    }

    [Fact]
    public void PerInstance_Classes_AreApplied()
    {
        // Arrange
        var cut = Render(
            @<Button Classes="@(new() { Base = "rounded-full" })" />
        );

        // Act
        var button = cut.Find("button");

        // Assert
        Assert.Contains("rounded-full", button.ClassList);
    }

    [Fact]
    public void PerInstance_ClassProperty_IsApplied()
    {
        // Arrange
        var cut =  Render(
            @<Button Class="m-2" />
        );

        // Act
        var button = cut.Find("button");

        // Assert
        Assert.Contains("m-2", button.ClassList);
    }

    [Fact]
    public void EnumerateOverrides_Yields_PerInstanceClasses()
    {
        // Arrange
        var instance = new Button
        {
            Classes = new Button.Slots { Base = "rounded-xl", Icon = "size-5" }
        };

        // Act
        var overrides = instance.Classes!.EnumerateOverrides().ToList();

        // Assert
        Assert.Contains(overrides, t => t.Slot == nameof(Button.Slots.Base) && t.Value == "rounded-xl");
        Assert.Contains(overrides, t => t.Slot == nameof(Button.Slots.Icon) && t.Value == "size-5");
    }
}
