@page "/docs/{*slug}"
@using System.Globalization
@attribute [DiscoverCollocatedJS]
@inject NavigationManager Navigation
@inject MarkdownRenderer MarkdownRenderer

<PageTitle>@_title - TailwindVariants.NET</PageTitle>

<HeadContent>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.30.0/themes/prism.min.css" media="(prefers-color-scheme: light)">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/prismjs@1.30.0/themes/prism-tomorrow.min.css" media="(prefers-color-scheme: dark)">
</HeadContent>

@if (_content is null)
{
    <div class="flex h-full items-center justify-center">
        <div class="spinner-border inline-block h-8 w-8 animate-spin rounded-full border-4 text-gray-600" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="prose prose-sm mx-auto px-4 py-8 md:prose md:max-w-4xl dark:prose-invert">
        @((MarkupString)_content)
    </div>
}

<JS For="this" />

@code
{
    [Parameter] public string? Slug { get; set; }

    private string? _title;
    private string? _content;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Slug))
        {
            Navigation.NavigateTo("/docs/getting-started", true);
            return;
        }

        ParsePageTitle();
        await ParsePageContentAsync();
    }

    private void ParsePageTitle()
    {
        var info = CultureInfo.InvariantCulture.TextInfo;
        var segments = Slug!.Split('/', StringSplitOptions.RemoveEmptyEntries)
            .Select(s => info.ToTitleCase(
                s.Replace("-", " ").Replace("_", " ").ToLowerInvariant()
            ));

        _title = string.Join(" - ", segments);
    }

    private async Task ParsePageContentAsync()
    {
        var filepath = Path.Combine("wwwroot", "docs", Path.ChangeExtension(Slug!, ".md"));

        if (!File.Exists(filepath))
        {
            Navigation.NavigateTo("/404", true);
            return;
        }

        _content = await MarkdownRenderer.RenderAsync(filepath);        
    }
}