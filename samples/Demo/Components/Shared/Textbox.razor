@inherits TailwindComponentBase

<div class="@_slots.GetOuterWrapper()">
	@if (!string.IsNullOrEmpty(Label))
	{
		<label class="@_slots.GetLabel()">@Label</label>
	}

	<div class="@_slots.GetInnerWrapper()">
		@if (PrefixContent is not null)
		{
			<div class="@_slots.GetPrefix()">
				@PrefixContent
			</div>
		}

		<input @bind:get="Value"
			   @bind:set="ValueChanged.InvokeAsync"
			   class="@_slots.GetBase()"
			   type="@Type"
			   placeholder="@Placeholder"
			   disabled="@Disabled"
			   readonly="@ReadOnly"
			   @attributes="AdditionalAttributes" />

		@if (SuffixContent is not null)
		{
			<div class="@_slots.GetSuffix()">
				@SuffixContent
			</div>
		}
	</div>

	@if (!string.IsNullOrEmpty(Error))
	{
		<p class="@_slots.GetError()">@Error</p>
	}
</div>

@code
{
	[Parameter] public string? Value { get; set; }
	[Parameter] public EventCallback<string> ValueChanged { get; set; }
	[Parameter] public string Type { get; set; } = "text";
	[Parameter] public string? Placeholder { get; set; }
	[Parameter] public string? Label { get; set; }
	[Parameter] public string? Error { get; set; }

	[Parameter] public RenderFragment? PrefixContent { get; set; }
	[Parameter] public RenderFragment? SuffixContent { get; set; }

	[Parameter] public Sizes Size { get; set; } = Sizes.Medium;
	[Parameter] public Variants Variant { get; set; } = Variants.Outline;

	[Parameter] public bool Disabled { get; set; }
	[Parameter] public bool ReadOnly { get; set; }
	[Parameter] public bool FullWidth { get; set; }

	[Parameter] public Slots? Classes { get; set; }
}
